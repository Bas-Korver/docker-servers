services:
  traefik:
    image: traefik:v3.1
    restart: always
    container_name: traefik
    labels:
      traefik.enable: true
      traefik.http.routers.dashboard.rule: Host(`traefik.xn--krver-jua.it`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.entrypoints: websecure
      traefik.http.routers.dashboard.tls.certresolver: cf-dns-resolver
      traefik.http.routers.dashboard.middlewares: auth, error-pages-middleware
      traefik.http.middlewares.auth.basicauth.users: admin:$$2y$$05$$bQUwGaqvf6BkeR8zOlyTJOVyoQyYBUW6b06L2PWAxNTO3T9rztX/6
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/email
      - CF_DNS_API_TOKEN_FILE=/run/secrets/dns_token
      - CF_ZONE_API_TOKEN_FILE=/run/secrets/zone_token
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: ${APPDATA_LOCATION:?No appdata directory configured}/letsencrypt
        target: /letsencrypt
      - type: bind
        # source: ${APPDATA_LOCATION:?No appdata directory configured}/traefik
        source: ./config
        target: /etc/traefik/
    secrets:
      - source: CLOUDFLARE_EMAIL
        target: email
      - source: CLOUDFLARE_DNS_TOKEN
        target: dns_token
      - source: CLOUDFLARE_ZONE_TOKEN
        target: zone_token        
    ports:
      - name: "web"
        published: 80
        target: 80
      - name: "websecure"
        published: 443
        target: 443
        protocol: tcp
      - name: "http3"
        published: 443
        target: 443
        protocol: udp
      # - name: "Insecure dashboard and api"
      #   published: 8080
      #   target: 8080
    depends_on:
      error-pages: {condition: service_healthy}

  error-pages:
    image: ghcr.io/tarampampam/error-pages:3
    restart: always
    container_name: error-pages
    labels:
      traefik.enable: true
      # use as "fallback" for any NON-registered services (with priority below normal)
      traefik.http.routers.error-pages-router.rule: HostRegexp(`.+`)
      traefik.http.routers.error-pages-router.priority: 10
      # should say that all of your services work on https
      traefik.http.routers.error-pages-router.entrypoints: websecure
      traefik.http.routers.error-pages-router.middlewares: error-pages-middleware
      # "errors" middleware settings
      traefik.http.middlewares.error-pages-middleware.errors.status: 400-599
      traefik.http.middlewares.error-pages-middleware.errors.service: error-pages-service
      traefik.http.middlewares.error-pages-middleware.errors.query: /{status}.html
      # define service properties
      traefik.http.services.error-pages-service.loadbalancer.server.port: 8080
    environment:
      TEMPLATE_NAME: cats
      DISABLE_L10N: "true"
      SHOW_DETAILS: "true"

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.xn--krver-jua.it`)
      traefik.http.routers.whoami.entrypoints: websecure
      traefik.http.routers.whoami.tls.certresolver: cf-dns-resolver
      traefik.http.routers.whoami.middlewares: error-pages-middleware

secrets:
  CLOUDFLARE_EMAIL:
    file: ${SECRETS_LOCATION:?No secrets folder configured}/${CLOUDFLARE_EMAIL:?No cloudflare email file configured}
  CLOUDFLARE_DNS_TOKEN:
    file: ${SECRETS_LOCATION:?No secrets folder configured}/${CLOUDFLARE_DNS_TOKEN:?No cloudflare DNS token file configured}
  CLOUDFLARE_ZONE_TOKEN:
    file: ${SECRETS_LOCATION:?No secrets folder configured}/${CLOUDFLARE_ZONE_TOKEN:?No cloudflare Zone token file configured}
    

networks:
  default:
    name: traefik